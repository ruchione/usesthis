---
title: Stewart Smith
summary: Programmer, graphic designer
categories:
- designer
- developer
- software
---

#### Who are you, and what do you do?

Let's start from the beginning. I booted up with an affinity for art and performance. My addiction to [programming][applesoft-basic] was a spin-off from obsessing over a typewriter just a few years later; pushing expression through a machine. But I'm [educated](http://art.yale.edu/GraphicDesign/ "Yale's graphic design program.") as a graphic designer. (Or is it [communication designer](http://www.art.uconn.edu/programs/bfa/design.htm "University of Connecticut's Communication Design program.")?) So what I do is attempt to pay the rent by navigating between those three things - art, code, and design - through my tiny studio called [Stewdio](http://stewdio.org/ "Stewart's website."). (I've begun to worry that I was meant to be a failed writer instead though.) I frequently collaborate with [Robert Gerard Pietrusko](http://warning-office.org/ "Robert's website.") and share studio space with Mr. [Jürg Lehni](http://scratchdisk.com/ "Jürg's website." ). And my name is Stewart Smith.

#### What hardware do you use?

I see these other interviewees here - people I respect - outlining brand names and machine models, how much RAM and all that. Does it make sense to catalog all of one's pricier possessions publicly? Or to boast about speed and computational power? If it seems fast now it will seem slow this time next year. And surely whatever we're using today is sloth-like compared to what someone like the [NSA](http://nsa.gov/ "America's National Security Agency.") must be using today. The bottom line is we're all using computer hardware that makes our data fragile. [Gutenberg bibles](http://en.wikipedia.org/wiki/Gutenberg_Bible "A Wikipedia entry on the Gutenberg Bible.") will survive well beyond our word processor documents and hyperlinked identities. Perhaps that should be the focus of a hardware discussion? (Sorry… I didn't mean to be difficult and entirely miss the point of "Uses This.")

#### And what software?

Ok, back on point. Sort of. Let's substitute "software" with "languages" for a moment. I've become enamored of [Ruby][]. [Why](http://en.wikipedia.org/wiki/Why_the_lucky_stiff "The Wikipedia entry on Why.")? Because it's elegant. So my current lineup is Ruby, [OpenGL][], [JavaScript][], and momentary blind grasps at [Scheme][] and [Lisp][]. [C][], [C++][c-plusplus], and [Objective-C][] are occasionally necessary for me but I prefer languages with a bit more poetry. I've only toyed with [Python][] a bit but I have some very [sharp friends](http://j2labs.net/ "J2 Labs' website.") who admire it.

#### What would be your dream setup?

I don't have a clear vision for this but let's sketch one out together. Perhaps the big topics should be [privacy](http://en.wikipedia.org/wiki/RSA "The Wikipedia entry on RSA."), [longevity](http://www.longnow.org/about/ "Information on The Long Now Foundation."), and [expression](http://www.yo-yoma.com/ "Yo-Yo Ma's website."). Making instruments more portable is easy: obstacles of speed, power, and compression fall away over time. Making interfaces "better" is the difficult task. Making them "invisible" is even harder. Whether storage is local / cloud / other is just a red herring. It's 2010 and we're still just mindlessly ambling through the script written at the [Media Lab in the 1980's](http://www.amazon.com/Media-Lab-Inventing-Future-M/dp/0140097015 "The Amazon listing for 'Inventing the Future at M.I.T.'."). (Though I don't recall a chapter titled "[Foxconn murders](http://www.google.com/search?q=foxconn+murders "A Google search for 'foxconn murders'.")" in there.) Companies like Apple are making [beautiful devices for consuming][ipad]. But for creating? (Oh dear. I've just realized I'm becoming quite a contrarian. Breaking for lunch in a moment…) I'm happy there's a [lorax](http://en.wikipedia.org/wiki/Al_Gore "The Wikipedia entry  on Al Gore.") on Apple's board of directors. That's positive. I think Google and Facebook could use a kick in the ass from [Phil Zimmermann](http://www.philzimmermann.com/EN/essays/WhyIWrotePGP.html "An article by Phil Zimmermann on why he wrote PGP."). (Going for that lunch break now…)

Three days later:

Ok. Interfaces. My dream setup would be more akin to working on a moldable sculpture. Something I really enjoy about small software is making a minor change then hitting refresh (or compile, or whatever). Tweak, refresh. Tweak. Refresh. A constant loop of small adjustments. Before someone interjects with "Photoshop?" or "MSP?" I must submit that I'm dreaming broader here: Rethink the keyboard. Scrap the mouse. It's an unclear, blurry vision I'm trying to surface from the bottom of this sludgy coffee mug.

Take a step and a half backward. Tilt your head to one side. Un-focus your eyes. Close one of them. Scrunch up your face. This sort of dance may seem ridiculous. And yet it's absolutely critical to the process of creation; contemplation. You see this choreography from sculptors at work. We need more of it in software development.

And these instruments ought to be accessible to children as well. Look at the piano for example. An uninstructed child will discover on their own that the keyboard's x-axis relates to pitch, force relates to volume, and if their little legs are long enough they can experiment with sustain. Minutes to learn (albeit badly). A lifetime to master. That's a good goal for new computing tools: intuitive enough to jump in on, but with room to evolve real skill and elegance. And programming (in some simplified visual form) ought to be taught in kindergarten alongside literacy. Conservatives love to harp on English and Math at the expense of Music and Art. Programming could integrate with and augment all of these. (At least in my fantasy future world. I'm dreaming here… just roll with it.) Think of it this way: You don't need [Mavis Beacon][mavis-beacon] when you have instant messaging. Adults and [children](http://bits.blogs.nytimes.com/2010/02/13/chatroulettes-founder-17-introduces-himself/ "A NYT piece on the creator of Chatroulette.") alike will endure the hardships of a learning curve if it enables them to more actively create, gossip, fight, and make up with their peers. (And that's doubly so if you're in the [cutthroat social status cesspool of adolescence](http://www.paulgraham.com/nerds.html "An article by Paul Graham on nerds.") where mastering a meme might get you a degree higher in the pecking order. Pianos don't just learn themselves you know.) Combine code and creativity in the classroom at an early age. [Good things will come](http://www.ted.com/talks/ken_robinson_says_schools_kill_creativity.html "Ken Robinson's TED talk on schools killing creativity.").

I have some other far-fetched ideas about guilds and collectives but it's all a jittery blur. Maybe the [coffee was a bad idea](http://theoatmeal.com/comics/coffee "The Oatmeal comic about coffee.").